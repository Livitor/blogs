<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0"><channel><title>+_=</title><link>https://Livitor.github.io/blogs</link><description>Blog description</description><copyright>+_=</copyright><docs>http://www.rssboard.org/rss-specification</docs><generator>python-feedgen</generator><image><url>https://avatars.githubusercontent.com/u/101435997?s=48&amp;v=4</url><title>avatar</title><link>https://Livitor.github.io/blogs</link></image><lastBuildDate>Mon, 16 Dec 2024 08:19:42 +0000</lastBuildDate><managingEditor>+_=</managingEditor><ttl>60</ttl><webMaster>+_=</webMaster><item><title>交换机配置 ssh 服务</title><link>https://Livitor.github.io/blogs/post/jiao-huan-ji-pei-zhi-%20ssh%20-fu-wu.html</link><description>拓扑图:&#13;
![image](https://github.com/user-attachments/assets/86eaa311-d458-470a-af93-4ab90ad6de9b)&#13;
&#13;
和配置 telnet 服务差不多, 唯一不同的是, ssh 服务, 只可以设置密码类型为 `scheme` , 因为安全&#13;
&#13;
&#13;
### 开启 ssh 服务&#13;
```bash&#13;
ssh server enable&#13;
```&#13;
&#13;
### 设置允许登录数量&#13;
```bash&#13;
user-interface vty 0 4&#13;
```&#13;
&#13;
### 设置密码类型&#13;
```bash&#13;
authentication-mode scheme&#13;
```&#13;
&#13;
### 创建用户&#13;
有默认权限, 默认&#13;
```bash&#13;
local-user h1&#13;
```&#13;
&#13;
### 设置用户密码&#13;
```bash&#13;
password simple asdf1234!@#$&#13;
```&#13;
&#13;
### 设置用户访问的服务&#13;
```bash&#13;
service-type ssh&#13;
```&#13;
&#13;
最后在 pc 机上 ssh 192.168.1.254 输入用户名和密码就可以连接了。</description><guid isPermaLink="true">https://Livitor.github.io/blogs/post/jiao-huan-ji-pei-zhi-%20ssh%20-fu-wu.html</guid><pubDate>Mon, 16 Dec 2024 08:19:18 +0000</pubDate></item><item><title>路由器配置静态路由</title><link>https://Livitor.github.io/blogs/post/lu-you-qi-pei-zhi-jing-tai-lu-you.html</link><description>&gt; [!example]+ 路由条目 &#13;
&gt; 直连&#13;
&gt; 静态&#13;
&gt; 动态&#13;
&#13;
&#13;
### 路由表:&#13;
目的ip/掩码; 路由协议; 优先级; 开销值(去往目的地需要的开销); 下一跳 ip; 出接口(去往目的ip时准备要走的接口)&#13;
```bash&#13;
[H3C]display ip routing-table&#13;
&#13;
Destinations : 4        Routes : 4&#13;
&#13;
Destination/Mask   Proto   Pre Cost        NextHop         Interface&#13;
127.0.0.0/8        Direct  0   0           127.0.0.1       InLoop0&#13;
127.0.0.1/32       Direct  0   0           127.0.0.1       InLoop0&#13;
127.255.255.255/32 Direct  0   0           127.0.0.1       InLoop0&#13;
255.255.255.255/32 Direct  0   0           127.0.0.1       InLoop0&#13;
```&#13;
&#13;
### 静态路由&#13;
拓扑图:&#13;
![image](https://github.com/user-attachments/assets/44076d7e-bdd3-418f-a07d-ee0c4a197044)&#13;
&#13;
1.IP地址配置习惯：以10.1.X.Y或10.1.X.x形式表示，其中X和Y表示设备编号。</description><guid isPermaLink="true">https://Livitor.github.io/blogs/post/lu-you-qi-pei-zhi-jing-tai-lu-you.html</guid><pubDate>Mon, 16 Dec 2024 08:16:29 +0000</pubDate></item><item><title>交换机配置 telnet  服务</title><link>https://Livitor.github.io/blogs/post/jiao-huan-ji-pei-zhi-%20telnet%20%20-fu-wu.html</link><description>使用一个交换机做成 telnet 服务, telnet 可以使用指定端口开启三层交换机, 用于与 pc 互通, 也可以使用自带的 vlan1 设置 ip 然后达到互通, 因为华三的交换机端口默认是 access 口, 默认带 vlan1 , 直接设置 vlan1 的 ip 也就可以实现互通&#13;
&#13;
## 实现互通&#13;
互通的两种方式&#13;
### 设置 vlan1 的 ip&#13;
端口默认带 access , vlan1 , 直接进入, 然后设置 ip&#13;
```bash&#13;
int vlan 1&#13;
ip a 192.168.1.254 24&#13;
```&#13;
&#13;
### 设置端口 ip&#13;
因为交换机是二层, 需要端口开启三层交换机&#13;
```bash&#13;
# 开启三层交换机&#13;
int g1/0/1&#13;
prot link-mode route&#13;
# 设置 ip&#13;
ip a 192.168.1.254 24&#13;
```&#13;
&#13;
# 三种不同密码类型登录&#13;
拓扑图&#13;
![image](https://github.com/user-attachments/assets/46e75716-98f2-47fc-8924-1b3d28ff20bf)&#13;
&#13;
## none 登录&#13;
顾名思义, 就是不需要密码就可以登录&#13;
&#13;
### 设置端口:&#13;
```bash&#13;
int g1/0/1&#13;
port link-mode route&#13;
ip a 192.168.1.254 24&#13;
```&#13;
&#13;
### 开启 telnet&#13;
默认是不开启服务的, 先设置开启服务&#13;
```bash&#13;
telnet server enable&#13;
```&#13;
&#13;
### 设置远程登录端口&#13;
0 - 4 是允许 5 个用户同时登录&#13;
```bash&#13;
user-interface vty 0 4&#13;
```&#13;
&#13;
### 设置密码类型&#13;
三个类型简单区别&#13;
authentication-mode none # 无密码登录&#13;
authentication-mode password # 有密码登录, 只有一个密码&#13;
authentication-mode scheme # 多用户登录, 有多个密码&#13;
&#13;
使用 password 登录&#13;
```bash&#13;
authentication-mode none&#13;
```&#13;
&#13;
&#13;
### 设置用户接入的协议类型&#13;
protocol inbound telnet # telnet 协议&#13;
protocol inbound ssh # ssh 协议&#13;
protocol inbound all # 所有&#13;
&#13;
使用 telnet 协议&#13;
```bash&#13;
protocol inbound telent&#13;
```&#13;
&#13;
### 设置登录级别&#13;
默认登录级别很低, 能操作的功能很少, 下面列出几种级别, 15 最高, 默认级别是 `network-operator` 也可以不用设置&#13;
```bash&#13;
[H3C-line-vty0-4]user-role ?&#13;
  STRING&lt;1-63&gt;      User role name&#13;
  network-admin&#13;
  network-operator&#13;
  level-0&#13;
  level-1&#13;
  level-2&#13;
  level-3&#13;
  level-4&#13;
  level-5&#13;
  level-6&#13;
  level-7&#13;
  level-8&#13;
  level-9&#13;
  level-10&#13;
  level-11&#13;
  level-12&#13;
  level-13&#13;
  level-14&#13;
  level-15&#13;
  security-audit&#13;
  guest-manager&#13;
```&#13;
&#13;
设置 level-15 级吧&#13;
```bash&#13;
user-role level-15&#13;
```&#13;
&#13;
然后就 ok 了, 可以在 pc 端连接, 要在普通模式下登录&#13;
```bash&#13;
telnet 192.168.1.254&#13;
```&#13;
登录成功后就可以看到和 SW 上操作的效果一样&#13;
&#13;
&#13;
## password登录&#13;
拓扑图:&#13;
![image](https://github.com/user-attachments/assets/0e0ef1f4-8cd5-4990-9dd9-12647466b16c)&#13;
&#13;
### 设置端口:&#13;
```bash&#13;
int g1/0/1&#13;
port link-mode route&#13;
ip a 192.168.1.253 24&#13;
```&#13;
### 开启 telnet&#13;
默认是不开启服务的, 先设置开启服务&#13;
```bash&#13;
telnet server enable&#13;
```&#13;
&#13;
### 设置远程登录端口&#13;
0 - 4 是允许 5 个用户同时登录&#13;
```bash&#13;
user-interface vty 0 4&#13;
```&#13;
&#13;
### 设置密码类型&#13;
三个类型简单区别&#13;
authentication-mode none # 无密码登录&#13;
authentication-mode password # 有密码登录, 只有一个密码&#13;
authentication-mode scheme # 多用户登录, 有多个密码&#13;
&#13;
使用 password 登录&#13;
```bash&#13;
authentication-mode password&#13;
```&#13;
&#13;
### 设置加密方式&#13;
这里有两种加密方式&#13;
set authentication password simple # 简单的密码&#13;
set authentication password hash # hash 加密&#13;
&#13;
使用简单密码加密&#13;
```bash&#13;
set authentication password simple asdf1234&#13;
```&#13;
&#13;
### 设置用户接入的协议类型&#13;
protocol inbound telnet # telnet 协议&#13;
protocol inbound ssh # ssh 协议&#13;
protocol inbound all # 所有&#13;
&#13;
使用 telnet 协议&#13;
```bash&#13;
protocol inbound telent&#13;
```&#13;
&#13;
### 设置登录级别&#13;
默认登录级别很低, 能操作的功能很少, 下面列出几种级别, 15 最高&#13;
```bash&#13;
[H3C-line-vty0-4]user-role ?&#13;
  STRING&lt;1-63&gt;      User role name&#13;
  network-admin&#13;
  network-operator&#13;
  level-0&#13;
  level-1&#13;
  level-2&#13;
  level-3&#13;
  level-4&#13;
  level-5&#13;
  level-6&#13;
  level-7&#13;
  level-8&#13;
  level-9&#13;
  level-10&#13;
  level-11&#13;
  level-12&#13;
  level-13&#13;
  level-14&#13;
  level-15&#13;
  security-audit&#13;
  guest-manager&#13;
```&#13;
&#13;
设置 level-15 级吧&#13;
```bash&#13;
user-role level-15&#13;
```&#13;
&#13;
然后就 ok 了, 可以在 pc 端连接, 要在普通模式下登录&#13;
```bash&#13;
telnet 192.168.1.254&#13;
```&#13;
登录成功后就可以看到和 SW 上操作的效果一样&#13;
&#13;
### 清除登录用户信息&#13;
最后, 如果想要去除起初允许了哪些范围内的用户可以登录 (以什么协议类型登录, 以什么级别登录, 以什么密码登录) , 可以使用 undo 去除这些权限, 自然会解除这些范围内的用户登录到交换机, 因为创建这个范围用户且没有设置这些权限的时候, 这些用户还算不上可以登录到交换机, `di th` 也自然看不到哪些范围内用户可以登录的信息&#13;
&#13;
## scheme登录&#13;
拓扑图:&#13;
![image](https://github.com/user-attachments/assets/ca0f3b8b-21c2-49dd-a38f-ad51f56b3949)&#13;
&#13;
### 设置端口:&#13;
```bash&#13;
int g1/0/1&#13;
port link-mode route&#13;
ip a 192.168.1.252 24&#13;
```&#13;
&#13;
### 开启 telnet 服务&#13;
```bash&#13;
telnet server enable&#13;
```&#13;
&#13;
### 设置远程登录端口&#13;
```bash&#13;
user-interface vty 0 4&#13;
```&#13;
&#13;
### 设置密码类型&#13;
```bash&#13;
authentication-mode scheme&#13;
```&#13;
&#13;
### 创建用户&#13;
需要回到 sy 界面, 也就是系统配置界面, 添加的用户 `h1` 并加入到 manage 组中, 默认是会添加到 `manager` 组中, 也可以后面加 `class manager` 添加到组中&#13;
```bash&#13;
local-user h1 &#13;
```&#13;
&#13;
### 创建用户密码&#13;
添加的密码(长度为10), 也可以选择 hash 加密, 这里使用的是 simple&#13;
```bash&#13;
password simple asdf1234!@#$&#13;
```&#13;
&#13;
### 设置用户接入的协议&#13;
该用户通过什么服务接入到交换机&#13;
```bash&#13;
service-type telnet&#13;
```&#13;
&#13;
### 设置用户登录级别&#13;
该用户以什么权限接入交换机, 默认权限是 `network-operator` , 下面的可以不执行&#13;
```bash&#13;
authorization-attribute user-role level-15&#13;
```&#13;
&#13;
最后 pc4 就可以通过 telnet 连接交换机了&#13;
&#13;
&#13;
## ### 清除登录用户信息&#13;
最后, 如果想要去除起初允许了哪些范围内的用户可以登录 (以什么协议类型登录, 以什么级别登录, 以什么密码登录) , 可以使用 undo 去除这些权限, 自然会解除这些范围内的用户登录到交换机, 因为创建这个范围用户且没有设置这些权限的时候, 这些用户还算不上可以登录到交换机, `di th` 也自然看不到哪些范围内用户可以登录的信息&#13;
&#13;
#### 比如:&#13;
查看这 5 个用户有哪些权限&#13;
```bash&#13;
&lt;SW1&gt;sy&#13;
System View: return to User View with Ctrl+Z.&#13;
[SW1]user-interface vty 0 4&#13;
[SW1-line-vty0-4]di th&#13;
#&#13;
line aux 0&#13;
 user-role network-operator&#13;
#&#13;
line con 0&#13;
 user-role network-admin&#13;
#&#13;
line vty 0 4&#13;
 authentication-mode none&#13;
 user-role network-operator&#13;
 protocol inbound telnet&#13;
#&#13;
line vty 5 63&#13;
 user-role network-operator&#13;
#&#13;
return&#13;
```&#13;
&#13;
可以看到权限如下:&#13;
```bash&#13;
line vty 0 4&#13;
 authentication-mode none&#13;
 user-role network-operator&#13;
 protocol inbound telnet&#13;
```&#13;
&#13;
然后清除对应的权限&#13;
```bash&#13;
[SW1-line-vty0-4]undo authentication-mode&#13;
[SW1-line-vty0-4]undo protocol inbound&#13;
[SW1-line-vty0-4]undo user-role&#13;
```&#13;
&#13;
再次查看权限:&#13;
```bash&#13;
[SW1-line-vty0-4]di th&#13;
#&#13;
line aux 0&#13;
 user-role network-operator&#13;
#&#13;
line con 0&#13;
 user-role network-admin&#13;
#&#13;
line vty 0 63&#13;
 user-role network-operator&#13;
#&#13;
return&#13;
```&#13;
发现已经没了。</description><guid isPermaLink="true">https://Livitor.github.io/blogs/post/jiao-huan-ji-pei-zhi-%20telnet%20%20-fu-wu.html</guid><pubDate>Fri, 13 Dec 2024 08:18:08 +0000</pubDate></item><item><title>常用命令</title><link>https://Livitor.github.io/blogs/post/chang-yong-ming-ling.html</link><description>显示文件内容&#13;
&#13;
```&#13;
type 文件名&#13;
```&#13;
&#13;
显示目录内容&#13;
&#13;
```&#13;
dir 路径&#13;
```&#13;
&#13;
显示目录树&#13;
&#13;
```&#13;
tree&#13;
```&#13;
&#13;
创建文件&#13;
&#13;
```&#13;
touch 文件名&#13;
```&#13;
&#13;
删除文件&#13;
&#13;
```&#13;
erase 文件名/文件夹名&#13;
```&#13;
&#13;
创建文件夹&#13;
&#13;
```&#13;
mkdir 文件夹名&#13;
```&#13;
&#13;
同时运行多个命令&#13;
&#13;
```&#13;
命令1 &amp; 命令2 &amp; ..&#13;
```&#13;
&#13;
用户与组&#13;
&#13;
```&#13;
显示用户:&#13;
net user&#13;
&#13;
添加用户:&#13;
net user 用户名 密码 /add&#13;
&#13;
用户添加到adminstrators组中:&#13;
net localgroup administrator 用户名 /add&#13;
```&#13;
&#13;
查看共享的文件夹&#13;
&#13;
```&#13;
net share&#13;
```&#13;
&#13;
如何共享文件夹:&#13;
&#13;
在被共享虚拟机的文件中设置分享文件&#13;
&#13;
![image](https://github.com/user-attachments/assets/90d9e89e-907d-431b-8e8f-b37ae3e55989)&#13;
&#13;
![image](https://github.com/user-attachments/assets/66752e31-72dd-428c-a5c6-e0fce77cf536)&#13;
&#13;
&#13;
如何共享磁盘:&#13;
&#13;
```&#13;
net use a: \\192.169.9.145\test aw123. /user:aw&#13;
&#13;
注:&#13;
net use 盘符: \\目标IP \目标文件夹 用户密码 /user:目标用户名&#13;
```。</description><guid isPermaLink="true">https://Livitor.github.io/blogs/post/chang-yong-ming-ling.html</guid><pubDate>Sat, 07 Dec 2024 04:06:21 +0000</pubDate></item><item><title>blog</title><link>https://Livitor.github.io/blogs/post/blog.html</link><description>blog1。</description><guid isPermaLink="true">https://Livitor.github.io/blogs/post/blog.html</guid><pubDate>Fri, 06 Dec 2024 18:07:31 +0000</pubDate></item></channel></rss>